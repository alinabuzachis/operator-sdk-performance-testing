---
- name: Set the {{ operator_type }} memcached operator image name.
  set_fact:
    operator_image: "{{ registry }}/{{ image_name }}-{{ operator_type }}:{{ image_tag }}"

- name: Set the app label selector for Helm.
  set_fact:
    app_label_selector: app.kubernetes.io/name=memcached
  when: operator_type == 'helm'

- name: Ensure the operator namespace exists.
  k8s:
    name: memcached-operator-system
    api_version: v1
    kind: Namespace
    state: present
  
- name: Ensure the specified ansible version is used (patch)
  template:
    src: Dockerfile-ansible.j2
    dest: ./operator-sdk/testdata/ansible/memcached-operator/Dockerfile
    force: yes
  when:
    - operator_type == 'ansible'
    - ansible_version_to_be_used != ''
    
- name: Ensure the specified k8s collection version is used (patch)
  template:
    src: requirements-k8s.yml.j2
    dest: ./operator-sdk/testdata/ansible/memcached-operator/requirements.yml
    force: yes
  when:
    - operator_type == 'ansible'
    - k8s_collection_version != ''

- name: Attempt to fix file permissions.
  file:
    dest: ./operator-sdk
    mode: 0777
    recurse: true

- name: Set the correct subdirectory for the Go operator example.
  set_fact:
    operator_subdir: v2/memcached-operator
  when: operator_type == 'go'

- name: Build, push, and deploy the {{ operator_type }} memcached operator.
  shell: "{{ item }}"
  args:
    chdir: ./operator-sdk/testdata/{{ operator_type }}/{{ operator_subdir }}
  with_items:
    # Can't use make for docker-build target because of Go operator test dep.
    - docker build . -t $IMG
    - make docker-push
    - make install
    - make deploy
  environment:
    IMG: "{{ operator_image }}"
    executable: /bin/bash

- name: Wait for Operator Pod to be 'Running'.
  k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - control-plane=controller-manager
    namespace: memcached-operator-system
  register: operator_pod
  failed_when: false
  until: operator_pod.resources[0].status.phase == 'Running'
  delay: 3
  retries: 15

- name: Pause to allow cluster to stabilize.
  pause:
    seconds: 10

# Benchmark 1: Deploy Memcached CRs.
- name: Deploy {{ memcached_cr_count }} {{ operator_type }} memcached CRs.
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/memcached-cr.yml.j2') }}"

- name: "[B1] Wait for {{ memcached_cr_count }} {{ operator_type }} Memcached Pods to be running."
  k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - "{{ app_label_selector }}"
  register: memcached_pods
  until: (memcached_pods.resources | count) >= memcached_cr_count
  delay: 3
  retries: 120

- name: "[B1] Wait for {{ operator_type }} Memcached Pods to be ready."
  command: >
    kubectl wait --for=condition=Ready
    pods --selector {{ app_label_selector }} --timeout=300s
  changed_when: false

# Benchmark 2: Kill Operator Pod, benchmark re-reconciliation.
- name: Add one more CR to the count.
  set_fact:
    memcached_cr_count: "{{ memcached_cr_count + 1 }}"

- name: Delete the {{ operator_type }} pod so it restarts.
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    name: "{{ operator_pod.resources[0].metadata.name }}"
    namespace: memcached-operator-system
    wait: false

- name: Pause to allow cluster to stabilize.
  pause:
    seconds: 10

- name: Deploy {{ memcached_cr_count }} {{ operator_type }} memcached CRs.
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/memcached-cr.yml.j2') }}"
    wait: false

- name: "[B2] Wait for {{ memcached_cr_count }} {{ operator_type }} Memcached Pods to be running."
  k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - "{{ app_label_selector }}"
  register: memcached_pods
  until: (memcached_pods.resources | count) == memcached_cr_count | int
  delay: 3
  retries: 120

# Benchmark 3: Benchmark how long it takes to remove all pods.
- name: Un-deploy {{ memcached_cr_count }} {{ operator_type }} memcached CRs.
  k8s:
    state: absent
    definition: "{{ lookup('template', 'templates/memcached-cr.yml.j2') }}"

- name: "[B3] Wait for all {{ operator_type }} Memcached Pods to be gone."
  k8s_info:
    api_version: v1
    kind: Pod
    label_selectors:
      - "{{ app_label_selector }}"
  register: memcached_pods
  until: (memcached_pods.resources | count) == 0
  delay: 5
  retries: 120

- name: Undeploy the {{ operator_type }} memcached operator.
  command: make undeploy
  async: 10
  poll: 0
  args:
    chdir: ./operator-sdk/{{ operator_type }}/memcached-operator
  environment:
    IMG: "{{ operator_image }}"
